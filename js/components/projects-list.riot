<!--Parent component that handles logic for gathering data-->
<projects-list>
    <p if={this.state.loading}>Loading...</p>
    <template if={!this.state.loading && !this.state.error}>
        <search search={this.search}></search>
        <div style="display: flex; justify-content: space-between; align-items: flex-end;">
            <button
                onclick={this.toggleFilterInDcp}
                class="vf-button vf-button--primary vf-button--pill vf-button--sm {this.state.filterInDcp ? " vf-button--outline" : ""}"
                style="float:left; padding: .6em"
            >
                In DCP 
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    height="20"
                    width="20"
                    style="float:right; margin: -3px 0px 0 5px"
                    if={this.state.filterInDcp}
                >
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
            <p 
                style="float: right; color: #505050; margin-bottom: 0;"
                class="vf-text-body vf-text-body--3"
                if={this.state.data}
                >
                    {this.state.data.length} projects shown
                </p>
        </div>
        <data-table 
            data={this.state.data}
            setSort={this.setSort}
            sort={this.state.sort}
            if={this.state.data}
        ></data-table>
    </template>
    <template if={this.state.error}>
        <div style="text-align: center;">
            <h1>Something went wrong</h1>
            <p>Please try refreshing the page.</p>
        </div>
    </template>

    <script>
        import DataTable from "./table.riot";
        import Search from "./search.riot";
        import resolve from "../resolver";
        import compose from "lodash/fp/compose";
        import query from "../query";

        export default {
            onMounted() {
                this.update({ data: [], loading: true })

                resolve().then(data => {
                    this.update({
                        unfilteredData: data,
                        data: data,
                        sort: {
                            timestampDesc: true
                        },
                        filterInDcp: false,
                        searchVal: "",
                        loading: false
                    });
                }).catch(e => {
                    console.error(e);
                    this.update({
                        error: true,
                        loading: false
                    })
                })
            },
            getSorted: ({ timestampDesc }) => data => {
                // Arrow function as this is "static" (pure function) and should not change state
                if (timestampDesc) {
                    return data.sort((a, b) => a.added_to_index <= b.added_to_index ? 1 : -1);
                }
                return data.sort((a, b) => a.added_to_index <= b.added_to_index ? -1 : 1);
            },
            applyFiltering() {
                return new Promise(async (resolve, reject) => {

                    const filteredUuids = await query(this.state.searchVal, this.state.filterInDcp);
                    let data = this.state.unfilteredData
                        .filter(project => filteredUuids.includes(project.uuid))

                    data = this.getSorted(this.state.sort)(data);
                    
                    this.update({
                        data
                    });
                    resolve();
                });
            },
            search(val) {
                this.update({
                    searchVal: val,
                });
                this.applyFiltering()

            },
            toggleFilterInDcp() {
                this.update({
                    filterInDcp: !this.state.filterInDcp
                });
                this.applyFiltering()

            },
            setSort(sortBy) {
                this.update({
                    sort: sortBy,
                });
                this.applyFiltering()

            },
            resetData() {
                this.update({
                    filterInDcp: false,
                    searchVal: "",
                    sort: {
                        timestampDesc: true
                    },
                });
                this.applyFiltering()
            },
            components: {
                DataTable,
                Search
            }
        }
    </script>
</projects-list>